{
package parse_peg
}

Grammar = __ json:Json __ (EOF / SyntaxError) {
    return json, nil
}

Json = BasicType / Array / Object

Object = "{" __ obj:( ObjectProperty OtherObjectProperties )? __ "}" {
    if obj == nil {
        return map[string]interface{}{}, nil
    }
    allProperties := obj.([]interface{})
    finalMap := allProperties[0].(map[string]interface{})
    if len(allProperties) > 1 {
        otherObj := allProperties[1].(map[string]interface{})
        for key, val := range otherObj {
            finalMap[key] = val
        }
    }
    return finalMap, nil
}

ObjectProperty = key:String __ ":" __ value:Json {
    m := make(map[string]interface{})
    keyStr := key.(string)
    m[keyStr] = value
    return m, nil
}

OtherObjectProperties = properties:( __ "," __ ObjectProperty )* {
    propertySlice := properties.([]interface{})
    m := make(map[string]interface{})
    for _, elem := range propertySlice {
        objSlice := elem.([]interface{})
        obj := objSlice[3].(map[string]interface{})
        for key, val := range obj {
            m[key] = val
        }
    }
    return m, nil
}

Array = "[" __ elements:( ArrayElement OtherArrayElements )? __ "]" {
    if elements == nil {
        return []interface{}{}, nil
    }
    elementSlice := elements.([]interface{})
    finalArr := []interface{}{ elementSlice[0] }
    otherElementSlice, typeOk := elementSlice[1].([]interface{})
    if typeOk {
        finalArr = append(finalArr, otherElementSlice...)
    } else {
        finalArr = append(finalArr, otherElementSlice)
    }

    return finalArr, nil
}

ArrayElement = Json

OtherArrayElements = elements:( __ "," __ ArrayElement )* {
    elementSlice := elements.([]interface{})
    arr := make([]interface{}, 0, len(elementSlice))
    for _, elem := range elementSlice {
        elemArr := elem.([]interface{})
        arr = append(arr, elemArr[3])
    }
    return arr, nil
}

BasicType = Boolean / Null / Number / String

// Actions will be seperated by the ChoiceExpr, so use `()`
// ```````````````
// Boolean = ("true" / "false") {
//     return string(c.text) == "true", nil
// }
// ```````````````
// Seems better
Boolean = "true" { return true, nil } / "false" { return false, nil }

Null = "null" {
    return nil, nil
}

// TODO: maybe int32? float32/float64?
Number = [0-9]+ {
    return strconv.ParseInt(string(c.text), 10, 64)
}

String = '"' ( "\\\"" / ( !'"' . ) )* '"' {
    s := string(c.text)
    l := len(s)
    if l < 3 {
        return "", nil
    }
    return s[1:l-1], nil
}

SyntaxError = . {
	return nil, errors.New("parser: syntax error")
}

__ = ( Whitespace / EOL )*

Whitespace = [ \t\r]
EOL = '\n'
EOF = !.
